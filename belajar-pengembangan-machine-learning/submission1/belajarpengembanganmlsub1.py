# -*- coding: utf-8 -*-
"""BelajarPengembanganMLSub1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q1IlN3cAx6b9KbZVaHDHSO7eTz51Bxol
"""

from google.colab import drive
drive.mount('/content/drive/')

import pandas as pd
data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Belajar Pengembangan Machine Learning/bbc-text.csv')

data.head()

# one-hot encoding
category = pd.get_dummies(data.category)
data_new = pd.concat([data, category], axis=1)
data_new = data_new.drop(columns='category')
data_new

# ubah nilai dataframe ke numpy array
teks = data_new['text'].values
label = data_new[['business', 'entertainment', 'politics', 'sport', 'tech']].values

# bagi data untuk training dan data untuk testing
from sklearn.model_selection import train_test_split
teks_latih, teks_test, label_latih, label_test = train_test_split(teks, label, test_size=0.2)

# ubah setiap teks pada dataset ke bilangan numerik dengan tokenizer
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(teks_latih)
tokenizer.fit_on_texts(teks_test)

sekuen_latih = tokenizer.texts_to_sequences(teks_latih)
sekuen_test = tokenizer.texts_to_sequences(teks_test)

padded_latih = pad_sequences(sekuen_latih)
padded_test = pad_sequences(sekuen_test)

# buat arsitektur model
import tensorflow as tf
model = tf.keras.Sequential([
                             tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
                             tf.keras.layers.LSTM(64),
                             tf.keras.layers.Dense(128, activation=tf.nn.relu),
                             tf.keras.layers.Dense(64, activation=tf.nn.relu),
                             tf.keras.layers.Dense(5, activation=tf.nn.softmax),
])
model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

# fungsi callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.95 and logs.get('val_accuracy')>0.95):
      print("\nAkurasi sudah mencapai 90%!")
      self.model.stop_training = True
callbacks = myCallback()

# run model
num_epochs = 20
history = model.fit(padded_latih, label_latih, epochs=num_epochs,
                    validation_data=(padded_test, label_test), verbose=2, callbacks=[callbacks])

# membuat plot Model loss
import matplotlib.pyplot as plt

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

# membuat plot Model accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc='lower right')
plt.show()